# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# ONTAP CA-signing-certs
# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
- block:
    - name: Login when ca signed certificates are used
      na_ontap_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: true
        gather_subset: "cluster_identity_info"
        summary: yes
      when: ca_signed_certs|bool

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# Verify Cluster Node names
# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
    - name: ONTAP cluster node names
      na_ontap_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
        gather_subset: "cluster_node_info"
        desired_attributes:
          cluster-node-info:
            node-name:
        summary: yes
      register: ontap_info_node_register
    - name: Check validity of ONTAP cluster nodes
      set_fact:
        ontap_nodes_validity: yes
      when: dst_nodes is subset(ontap_info_node_register.ontap_info.cluster_node_info)

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# Verify data aggregate names
# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
    - name: ONTAP data aggregate names
      na_ontap_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
        gather_subset: "aggregate_info"
        desired_attributes:
          aggr-attributes:
            aggregate-name:
        summary: yes
      register: ontap_info_aggregate_register
    - name: Check validity of ONTAP cluster aggregates
      set_fact:
        ontap_aggregates_validity: yes
      when: (data_aggregates | map(attribute='aggr_name') | list) is subset(ontap_info_aggregate_register.ontap_info.aggregate_info)

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# Verify NFS vlan has been created
# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
    - name: ONTAP cluster VLAN check
      na_ontap_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
        gather_subset: "net_vlan_info"
      register: ontap_info_vlan_register
    - set_fact:
        ontap_vlan_check: "{{ ontap_vlan_check + [item] }}"
      vars:
        ontap_vlan_check: []
        query: "[].value[] | [?node=='{{ item }}'].vlanid[]"
      when: (storage_vlans | map(attribute='vlan_id') | list) is subset(ontap_info_vlan_register.ontap_info.net_vlan_info | dict2items | json_query(query))
      with_items: "{{ dst_nodes }}"
    - vars:
        ontap_vlan_ifgrp: []
      set_fact:
        ontap_vlan_ifgrp: "{{ ontap_vlan_ifgrp + [item.value.parent_interface] }}"
      with_items: "{{ ontap_info_vlan_register.ontap_info.net_vlan_info | dict2items }}"
      when: item.value.vlanid in (storage_vlans | map(attribute='vlan_id') | list)
    - name: Check validity of VLANs on ifgroups
      set_fact:
        ontap_vlan_validity: yes
      when: (ontap_vlan_check | difference(dst_nodes) | list)|length==0

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# Verify network ports that make up interface group match ontap_vars
# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
    - name: ONTAP ifgrp ports check
      netapp.ontap.na_ontap_info:
        hostname: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        https: true
        validate_certs: false
        gather_subset: "net_ifgrp_info"
      register: ontap_info_ports_register
    - set_fact:
        ontap_ports_intr: "{{ ontap_info_ports_register.ontap_info.net_ifgrp_info | dict2items }}"
    - vars:
        node_data_ports: []
      set_fact:
        node_data_ports: "{{ node_data_ports + [ {'node_name': item.value.node, 'ports': item.value.ports.lif_bindable} ] }}"
      with_items: "{{ ontap_ports_intr }}"
      when: (item.value.node in ontap_vlan_check) and (item.value.ifgrp_name in ontap_vlan_ifgrp)

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# Set_fact for the following variabless: nfs_lifs, svm_specs, svm_root_volume, svm root_mirror_volumes, nfs_exp_policy
# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
    - name: Set nfs_lifs variable
      vars:
        nfs_lifs: []
      set_fact:
        nfs_lifs: "{{ nfs_lifs + [item[0] | combine(item[1], recursive=True)] }}"
      with_together:
        - "{{ nfs_lifs_defaults }}"
        - "{{ nfs_lifs_details }}"
    - name: Set svm_specs variable
      vars:
        svm_specs: []
      set_fact:
        svm_specs: "{{ svm_specs + [item[0] | combine(item[1], recursive=True)] }}"
      with_together:
        - "{{ svm_mgmt_defaults }}"
        - "{{ svm_mgmt_details }}"
    - name: Set svm_root_volume variable
      set_fact:
        svm_root_volume: "{{ svm_name }}_root"
      when: svm_root_volume is not defined
    - name: Set root_mirror_volumes variable
      set_fact:
        root_mirror_volumes: "[{'root_mirror_volume': '{{ svm_name }}_m01'}, {'root_mirror_volume': '{{ svm_name }}_m02'}]"
      when: root_mirror_volumes is not defined
    - name: Set nfs_exp_policy variable
      set_fact:
        nfs_exp_policy: "{{ svm_name }}_client"
      when: nfs_exp_policy is not defined
  tags:
    - pre_req
    - ontap_config_svm
    - ontap_ls_mirror_volumes
    - ontap_config_job_schedule
    - ontap_snapmirror_relationship
    - ontap_unlock_svm_admin
    - ontap_svm_mgmt_lif
    - ontap_export_policy_rule
    - ontap_export_policy_apply
    - ontap_flexvol_create
    - ontap_nfs_lif

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
